# ============================================================================
# OCPP Server Nginx Configuration for WSS (WebSocket Secure) Support
# Domain: lyncpower.com
# Backend: FastAPI app running on localhost:8080
# ============================================================================

# Define upstream backend server
# This points to your FastAPI application running locally
upstream ocpp_backend {
    server 127.0.0.1:8080;  # FastAPI on localhost port 8080 (not exposed externally)
    keepalive 64;            # Keep 64 connections alive for better performance
}

# ============================================================================
# HTTP Server (Port 80)
# Purpose: Handle Let's Encrypt certificate validation and redirect to HTTPS
# ============================================================================
server {
    listen 80;              # Listen on IPv4 port 80
    listen [::]:80;         # Listen on IPv6 port 80
    server_name lyncpower.com;

    # Let's Encrypt certificate validation path
    # Certbot uses this to verify domain ownership during renewal
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    # Redirect all HTTP traffic to HTTPS for security
    # Example: http://lyncpower.com/api â†’ https://lyncpower.com/api
    location / {
        return 301 https://$server_name$request_uri;
    }
}

# ============================================================================
# HTTPS Server (Port 443) - Main Configuration
# Purpose: Handle all secure traffic (HTTPS/WSS) with SSL/TLS
# ============================================================================
server {
    listen 443 ssl;         # Listen on IPv4 port 443 with SSL
    listen [::]:443 ssl;    # Listen on IPv6 port 443 with SSL
    http2 on;               # Enable HTTP/2 for better performance
    server_name lyncpower.com;

    # -------------------------------------------------------------------------
    # SSL/TLS Certificate Configuration
    # Certificates obtained from Let's Encrypt via Certbot
    # -------------------------------------------------------------------------
    ssl_certificate /etc/letsencrypt/live/lyncpower.com/fullchain.pem;        # Public certificate + chain
    ssl_certificate_key /etc/letsencrypt/live/lyncpower.com/privkey.pem;      # Private key

    # -------------------------------------------------------------------------
    # Modern SSL/TLS Security Settings
    # -------------------------------------------------------------------------
    ssl_protocols TLSv1.2 TLSv1.3;  # Only allow TLS 1.2 and 1.3 (secure versions)

    # Strong cipher suites for encryption (prioritize modern, secure algorithms)
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305';

    ssl_prefer_server_ciphers off;   # Let client choose cipher (modern best practice)
    ssl_session_cache shared:SSL:10m; # Cache SSL sessions for 10MB (improves performance)
    ssl_session_timeout 10m;          # Keep sessions cached for 10 minutes
    ssl_stapling on;                  # Enable OCSP stapling (faster certificate validation)
    ssl_stapling_verify on;           # Verify OCSP responses

    # -------------------------------------------------------------------------
    # Security Headers
    # Protect against common web vulnerabilities
    # -------------------------------------------------------------------------
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;  # Force HTTPS for 1 year
    add_header X-Frame-Options "SAMEORIGIN" always;                                       # Prevent clickjacking
    add_header X-Content-Type-Options "nosniff" always;                                   # Prevent MIME sniffing

    # -------------------------------------------------------------------------
    # Logging Configuration
    # -------------------------------------------------------------------------
    access_log /var/log/nginx/ocpp_access.log;  # Log all requests
    error_log /var/log/nginx/ocpp_error.log;    # Log errors

    # =========================================================================
    # LOCATION: /ocpp/ - OCPP WebSocket Endpoint (CRITICAL FOR WSS)
    # Purpose: Handle OCPP 1.6 WebSocket connections from EV chargers
    # URL: wss://lyncpower.com/ocpp/{charge_point_id}
    # =========================================================================
    location /ocpp/ {
        proxy_pass http://ocpp_backend;  # Forward to FastAPI backend

        # ---------------------------------------------------------------------
        # WebSocket Upgrade Headers (REQUIRED for WebSocket to work)
        # These headers tell nginx to upgrade HTTP to WebSocket protocol
        # ---------------------------------------------------------------------
        proxy_http_version 1.1;                      # Use HTTP/1.1 (required for WebSockets)
        proxy_set_header Upgrade $http_upgrade;      # Pass WebSocket upgrade request
        proxy_set_header Connection "upgrade";       # Set connection to upgrade mode

        # ---------------------------------------------------------------------
        # Preserve Client Information
        # Pass original client details to backend for logging/security
        # ---------------------------------------------------------------------
        proxy_set_header Host $host;                           # Original hostname (lyncpower.com)
        proxy_set_header X-Real-IP $remote_addr;               # Client's real IP address
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Chain of proxy IPs
        proxy_set_header X-Forwarded-Proto $scheme;            # Original protocol (https)

        # ---------------------------------------------------------------------
        # OCPP-Specific Timeouts (Long-lived WebSocket Connections)
        # OCPP chargers maintain persistent connections for hours
        # ---------------------------------------------------------------------
        proxy_read_timeout 3600s;      # Wait up to 1 hour for data from backend
        proxy_send_timeout 3600s;      # Wait up to 1 hour to send data to backend
        proxy_connect_timeout 60s;     # Wait up to 60 seconds to establish connection

        # ---------------------------------------------------------------------
        # Disable Buffering (CRITICAL for Real-time WebSocket Communication)
        # Buffering would delay messages - we need instant delivery
        # ---------------------------------------------------------------------
        proxy_buffering off;            # Don't buffer responses
        proxy_request_buffering off;    # Don't buffer requests
    }

    # =========================================================================
    # LOCATION: /api/ - REST API Endpoints
    # Purpose: Handle HTTP REST API calls from frontend/mobile apps
    # URL: https://lyncpower.com/api/*
    # =========================================================================
    location /api/ {
        proxy_pass http://ocpp_backend;  # Forward to FastAPI backend
        proxy_http_version 1.1;

        # Preserve client information
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Standard timeouts for REST API (shorter than WebSocket)
        proxy_read_timeout 60s;         # Wait up to 60 seconds for response
        proxy_send_timeout 60s;         # Wait up to 60 seconds to send request
        proxy_connect_timeout 10s;      # Wait up to 10 seconds to connect
    }

    # =========================================================================
    # LOCATION: / - Root and Documentation Endpoints
    # Purpose: Handle root path, /docs, and other general endpoints
    # URL: https://lyncpower.com/ or https://lyncpower.com/docs
    # =========================================================================
    location / {
        proxy_pass http://ocpp_backend;  # Forward to FastAPI backend
        proxy_http_version 1.1;

        # Preserve client information
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Standard timeouts
        proxy_read_timeout 60s;
        proxy_send_timeout 60s;
    }

    # =========================================================================
    # LOCATION: /health - Health Check Endpoint (Optional)
    # Purpose: Monitor backend health without cluttering logs
    # =========================================================================
    location /health {
        access_log off;                  # Don't log health checks
        proxy_pass http://ocpp_backend;  # Forward to backend health endpoint
    }
}

# ============================================================================
# Configuration Summary:
# - HTTP (port 80): Redirects to HTTPS
# - HTTPS (port 443): Handles all secure traffic
# - /ocpp/: Long-lived WebSocket connections for OCPP chargers (WSS)
# - /api/: REST API endpoints for frontend
# - /: General endpoints and documentation
# - SSL: Let's Encrypt certificates with modern security settings
# - Backend: FastAPI on localhost:8080 (not exposed to internet)
# ============================================================================

# ============================================================================
# Installation Instructions:
#
# 1. Copy this file to your Vultr server:
#    sudo cp nginx-ocpp-server.conf /etc/nginx/sites-available/ocpp-server
#
# 2. Enable the site:
#    sudo ln -s /etc/nginx/sites-available/ocpp-server /etc/nginx/sites-enabled/
#
# 3. Remove default site (if exists):
#    sudo rm /etc/nginx/sites-enabled/default
#
# 4. Test configuration:
#    sudo nginx -t
#
# 5. Reload nginx:
#    sudo systemctl reload nginx
#
# ============================================================================
